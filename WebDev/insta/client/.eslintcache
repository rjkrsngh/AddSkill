[{"C:\\Users\\raj\\Desktop\\insta\\client\\src\\index.js":"1","C:\\Users\\raj\\Desktop\\insta\\client\\src\\App.js":"2","C:\\Users\\raj\\Desktop\\insta\\client\\src\\reportWebVitals.js":"3","C:\\Users\\raj\\Desktop\\insta\\client\\src\\Components\\NavBar.js":"4","C:\\Users\\raj\\Desktop\\insta\\client\\src\\Components\\Login.js":"5","C:\\Users\\raj\\Desktop\\insta\\client\\src\\Components\\Signup.js":"6","C:\\Users\\raj\\Desktop\\insta\\client\\src\\Components\\Home.js":"7","C:\\Users\\raj\\Desktop\\insta\\client\\src\\Components\\Profile.js":"8","C:\\Users\\raj\\Desktop\\insta\\client\\src\\Components\\CreatePost.js":"9","C:\\Users\\raj\\Desktop\\insta\\client\\src\\Reducers\\userReducer.js":"10","C:\\Users\\raj\\Desktop\\insta\\client\\src\\Components\\UserProfile.js":"11"},{"size":503,"mtime":1612270151292,"results":"12","hashOfConfig":"13"},{"size":2553,"mtime":1612932898206,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":1431,"mtime":1612561679748,"results":"16","hashOfConfig":"13"},{"size":2450,"mtime":1612969389779,"results":"17","hashOfConfig":"13"},{"size":2867,"mtime":1612429569541,"results":"18","hashOfConfig":"13"},{"size":7346,"mtime":1612962576200,"results":"19","hashOfConfig":"13"},{"size":2171,"mtime":1612963506911,"results":"20","hashOfConfig":"13"},{"size":2941,"mtime":1612940155882,"results":"21","hashOfConfig":"13"},{"size":221,"mtime":1612561196270,"results":"22","hashOfConfig":"13"},{"size":4001,"mtime":1612963167528,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1dx6vh2",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"26"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},"C:\\Users\\raj\\Desktop\\insta\\client\\src\\index.js",[],["55","56"],"C:\\Users\\raj\\Desktop\\insta\\client\\src\\App.js",["57","58"],"import './App.css';\nimport React, {useEffect, createContext, useReducer, useContext} from 'react';\nimport { BrowserRouter, Route, Switch, useHistory } from 'react-router-dom';\n\nimport Login from './Components/Login';\nimport Signup from './Components/Signup';\nimport NavBar from './Components/NavBar';\nimport Home from './Components/Home';\nimport Profile from './Components/Profile';\nimport CreatePost from './Components/CreatePost';\nimport UserProfile from './Components/UserProfile';\nimport {reducer, initialState} from './Reducers/userReducer';\n\n// TODO: read on react hooks\nexport const UserContext = createContext();\n\n// Whenever the state of a component changes, it is re-rendered\n// So to grab and reflect the new change, we make use of useReducer\n// It is similar to useState\n\nconst Routing = ()=>{\n  const history = useHistory();\n  const {state, dispatch} = useContext(UserContext);\n\n  useEffect(()=>{\n    const user = JSON.parse(localStorage.getItem('userdata'));\n    if(user){\n      dispatch({\n        type: 'USER',\n        payload: user\n      });\n    }else{\n      history.push('/signin');\n    }\n  }, []);\n\n  return (\n    // use switch or fragments\n    <Switch>\n      <Route exact path=\"/\">\n        <Home />\n      </Route>\n            \n      <Route path='/signin'>                                                                                                                                \n        <Login />\n      </Route>\n\n      <Route path='/signup'>                                                                                                                                \n        <Signup />\n      </Route>\n\n      <Route exact path='/profile'>                                                                                                                               \n        <Profile />\n      </Route>\n\n      <Route path='/create'>                                                                                                                               \n        <CreatePost />\n      </Route>\n\n      <Route path='/user/:userId'>                                                                                                                               \n        <UserProfile />\n      </Route>      \n    </Switch>\n  );\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n    return (\n      <UserContext.Provider value={{state, dispatch}}>\n        <BrowserRouter>\n          <NavBar />\n          <Routing />\n        </BrowserRouter>\n        </UserContext.Provider>\n    );\n}\n\nexport default App;","C:\\Users\\raj\\Desktop\\insta\\client\\src\\reportWebVitals.js",[],"C:\\Users\\raj\\Desktop\\insta\\client\\src\\Components\\NavBar.js",[],"C:\\Users\\raj\\Desktop\\insta\\client\\src\\Components\\Login.js",["59"],"import React, {useState, useContext} from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport M from 'materialize-css';\r\nimport {UserContext} from '../App';\r\n\r\nconst Login = () => {\r\n    const history = useHistory();\r\n    const [name, setName] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const {state, dispatch} = useContext(UserContext);\r\n\r\n    const makeLoginRequest = ()=>{\r\n        if((!name) || (!password)){\r\n            M.toast({html: 'invalid credentials', classes:'#c62828 red darken-3'});\r\n        }else{\r\n            fetch('/signin', {\r\n                method: 'POST',\r\n                headers:{\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    name,\r\n                    password\r\n                })\r\n            }).then(res=>res.json())\r\n            .then(data=>{\r\n                if(data.error){\r\n                    M.toast({html: data.error, classes:'#c62828 red darken-3'});\r\n                }else{\r\n                    localStorage.setItem('jwtToken', data.token);\r\n                    localStorage.setItem('userdata', JSON.stringify(data.user)); // localStorage stores only string data\r\n\r\n                    dispatch({\r\n                        type: 'USER',\r\n                        payload: data.user\r\n                    });\r\n\r\n                    M.toast({html: 'signin successful', classes:'#00e676 green accent-3'});\r\n                    history.push('/');\r\n                }\r\n            }).catch(err=>{\r\n                console.log('err: ', err);\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='login-card'>\r\n    \t\t<div className='card auth-card'>\r\n    \t\t\t<h2>Login</h2>\r\n\r\n    \t\t\t<input type='text' placeholder='username' required value={name} \r\n                    onChange={(event)=>setName(event.target.value)}/>\r\n    \t\t\t<input type='password' placeholder='password' required value={password}\r\n                    onChange={(event)=>setPassword(event.target.value)}/>\r\n\r\n\t\t\t\t<button className=\"btn waves-effect waves-light #64b5f6 blue lighten-2\" type=\"submit\" name=\"action\"\r\n                    onClick={()=>makeLoginRequest()}>Login</button>\r\n\t\t\t\t<h5 className='existing-user'> <Link to=\"/signup\"> new user? </Link> </h5>\t                                                                     \r\n    \t\t</div>\r\n    \t</div>\r\n    );\r\n}\r\n\r\nexport default Login;","C:\\Users\\raj\\Desktop\\insta\\client\\src\\Components\\Signup.js",["60","61"],"import React, { useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport M from 'materialize-css';\r\n\r\nconst Signup = () => {\r\n    const history = useHistory();\r\n    const [name, setName] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [email, setEmail] = useState('');\r\n\r\n    const makeSignupRequest = () => {\r\n        // if (!name || !email || !password) {\r\n        //     console.log('all fields are required');\r\n        // } else {\r\n\r\n        // validate Email\r\n        if(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email)){\r\n            console.log(name, email, password);\r\n            fetch('/signup', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        name,\r\n                        email,\r\n                        password\r\n                    })\r\n                }).then(res=>res.json())\r\n                .then(data => {\r\n                    console.log('data: ', data);\r\n                    if(data.error){\r\n                         M.toast({html: data.error, classes:'#c62828 red darken-3'});\r\n                    }else{\r\n                        M.toast({html: data.message, classes:'#00e676 green accent-3'});\r\n                        history.push('/home');\r\n                    }\r\n                }).catch(err=>{\r\n                    console.log('err: ', err);\r\n                });\r\n        }else{\r\n            M.toast({html: \"invalid email\", classes:'#c62828 red darken-3'});\r\n        }\r\n        // }\r\n    }\r\n\r\n    return (\r\n        <div className='login-card'>\r\n            <div className='card auth-card'>\r\n                <h2>Signup</h2>\r\n\r\n                <input type='text' placeholder='username' required value={name} name='name'\r\n                    onChange={(e)=>setName(e.target.value)}/>\r\n                <input type='email' placeholder='email' required value={email} name='email'\r\n                    onChange={(e)=>setEmail(e.target.value)}/>\r\n                <input type='password' placeholder='password' required value={password} name='password'\r\n                    onChange={(e)=>setPassword(e.target.value)}/>\r\n\r\n                <button className=\"btn waves-effect waves-light #64b5f6 blue lighten-2\" \r\n                onClick={()=>makeSignupRequest()} type=\"submit\" name=\"action\">Register</button>\r\n                \r\n                <h5 className='existing-user'> <Link to=\"/signin\"> Already a user? </Link> </h5>                                                                                                   \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Signup;","C:\\Users\\raj\\Desktop\\insta\\client\\src\\Components\\Home.js",["62","63","64","65","66","67","68","69"],"import React, {useState, useEffect, useContext} from 'react';\r\nimport {UserContext} from '../App';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nconst Home = () => {\r\n    const [data, setData] = useState([]);\r\n    const {state, dispatch} = useContext(UserContext);\r\n    \r\n    useEffect(()=>{\r\n        fetch('/postlist', {\r\n            method :'GET',\r\n            headers:{\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem('jwtToken')\r\n            }\r\n        }).then(res=>res.json())\r\n        .then(res=>{\r\n            console.log('before reversing:', res.posts);\r\n            res.posts.reverse();\r\n            console.log('after reversing:', res.posts);\r\n            setData(res.posts);\r\n        }).catch(err=>{\r\n            console.log('err while fetching post list: ', err);\r\n        })\r\n    }, []);\r\n\r\n    const likePost = (postId)=>{\r\n        fetch('like', {\r\n            method : 'PUT',\r\n            headers : {\r\n                'Content-Type' : 'application/json',\r\n                'Authorization' : 'Bearer ' + localStorage.getItem('jwtToken')\r\n            },\r\n            body: JSON.stringify({\r\n                postId\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n            let response_result = result.result;\r\n            const newData = data.map(item=>{\r\n                if(item._id == response_result._id){\r\n                    return response_result\r\n                }else{\r\n                    return item\r\n                }\r\n            });\r\n            setData(newData);\r\n        })\r\n        .catch(err=>{\r\n            console.log('error sending increment like count req: ', err);\r\n        });\r\n    }\r\n\r\n    const unlikePost = (postId)=>{\r\n        fetch('unlike', {\r\n            method : 'PUT',\r\n            headers : {\r\n                'Content-Type' : 'application/json',\r\n                'Authorization' : 'Bearer ' + localStorage.getItem('jwtToken')\r\n            },\r\n            body: JSON.stringify({\r\n                postId\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n            let response_result = result.result;\r\n            const newData = data.map(item=>{\r\n                if(item._id == response_result._id){\r\n                    return response_result\r\n                }else{\r\n                    return item\r\n                }\r\n            });\r\n            setData(newData);            \r\n        })\r\n        .catch(err=>{\r\n            console.log('error sending decrement like count req: ', err);\r\n        });\r\n    }\r\n\r\n    const createCommentOnPost = (postId, text) => {\r\n        fetch('/comment', {\r\n            method : 'PUT',\r\n            headers : {\r\n                'Content-Type' : 'application/json',\r\n                'Authorization' : 'Bearer ' + localStorage.getItem('jwtToken')\r\n            },\r\n            body : JSON.stringify({\r\n                text,\r\n                postId\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(res=>{\r\n            let response_result = res.result;\r\n            const newData = data.map(item=>{\r\n                if(item._id == response_result._id){\r\n                    return response_result\r\n                }else{\r\n                    return item\r\n                }\r\n            });   \r\n            setData(newData);         \r\n        })\r\n        .catch(err=>{\r\n            console.log('error while fetching comments: ', err);\r\n        });\r\n    }\r\n\r\n    const makeDeletePostReq = (postId)=>{\r\n        fetch('/post/delete/'+postId, {\r\n            method : 'DELETE',\r\n            headers : {\r\n                'Content-Type' : 'application/json',\r\n                'Authorization' : 'Bearer ' + localStorage.getItem('jwtToken')\r\n            }\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n            let resp = result.result;\r\n            const newData = data.filter(item=>{\r\n                return item._id !== resp._id;\r\n            });\r\n            setData(newData);\r\n        }).catch(err=>{\r\n            console.log('error from server: ', err);\r\n        })\r\n    }\r\n\r\n    const makeDeleteCommentReq = (commentId) => {\r\n        fetch('/comment/delete/'+commentId, {\r\n            method : 'DELETE',\r\n            headers : {\r\n                'Content-Type' : 'application/json',\r\n                'Authorization' : 'Bearer ' + localStorage.getItem('jwtToken')\r\n            }\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n            console.log('result: ', result)\r\n        })\r\n        .catch(err=>{\r\n            console.log('error while deleting comment: ', err);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"home\">\r\n        {\r\n            data.map(item=>{\r\n                return (\r\n                    <div className='card home-card' key={item._id}>\r\n                        <h5> <Link to={ item.postedBy._id != state._id ? \"/user/\"+item.postedBy._id : '/profile'}> \r\n                            {item.postedBy.name} </Link>\r\n                            {item.postedBy._id == state._id &&\r\n                                <i className=\"material-icons\" style={{float:'right'}}\r\n                                onClick={()=>makeDeletePostReq(item._id)}>delete</i> }\r\n                        </h5>\r\n                        \r\n                        <div className='card-image'> \r\n                            <img src={item.photo}/>\r\n                        </div>\r\n\r\n                        <div className='card-content'>\r\n                            <i className=\"material-icons\">favorite</i>                          \r\n                                {item.likes.includes(state._id) \r\n                              ? <i className=\"material-icons\" onClick={()=>{unlikePost(item._id)}}>thumb_down</i>\r\n                              : <i className=\"material-icons\" onClick={()=>{likePost(item._id)}}>thumb_up</i>\r\n                            }                             \r\n\r\n                            <h6> {item.likes.length} likes </h6>\r\n                            <h6> {item.title} </h6>\r\n                            <p> {item.body} </p>\r\n\r\n                            <hr/>\r\n                            {\r\n                                item.comments.length ?\r\n                                    item.comments.map(comment=>{\r\n                                        return (\r\n                                            <div key={comment._id}>\r\n                                                <h7> {comment.postedBy.name} : {comment.text}</h7>\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                    : <div>\r\n                                         <p> No comments! </p>\r\n                                      </div>\r\n                            }\r\n\r\n                            <form onSubmit={(event)=>{\r\n                                event.preventDefault();\r\n                                createCommentOnPost(item._id, event.target[0].value);\r\n\r\n                            }}> \r\n                                <input type='text' placeholder='comment'/>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            })\r\n        }\r\n    \t</div>\r\n    );\r\n}\r\n\r\nexport default Home;","C:\\Users\\raj\\Desktop\\insta\\client\\src\\Components\\Profile.js",["70","71"],"import React, {useState, useEffect, useContext} from 'react';\r\nimport {UserContext} from '../App';\r\n\r\nconst Profile = () => {\r\n\tconst [myPosts, setMyPosts] = useState([]);\r\n\tconst [userInfo, setUserInfo] = useState({});\r\n\tconst {state, dispatch} = useContext(UserContext);\r\n\r\n\tuseEffect(()=>{\r\n\t\tfetch('/myposts', {\r\n\t\t\tmethod : 'GET',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t'Authorization': 'Bearer ' + localStorage.getItem('jwtToken')\r\n\t\t\t}\r\n\t\t}).then(res=>res.json())\r\n\t\t.then(res=>{\r\n\t\t\tconsole.log('res for myposts:', res.posts);\r\n\t\t\tsetMyPosts(res.posts);\r\n\t\t}).catch(err=>{\r\n\t\t\tconsole.log('error fetching myposts from db', err);\r\n\t\t})\r\n\r\n\t\tfetch('/myinfo', {\r\n\t\t\tmethod : 'GET',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t'Authorization': 'Bearer ' + localStorage.getItem('jwtToken')\r\n\t\t\t}\r\n\t\t}).then(res=>res.json())\r\n\t\t.then(res=>{\r\n\t\t\tconsole.log('received user info for Profile', res);\r\n\t\t\tsetUserInfo(res.user);\r\n\t\t}).catch(err=>{\r\n\t\t\tconsole.log('error fetching myposts from db', err);\r\n\t\t})\t\t\r\n\t}, []);\r\n\r\n    return (\r\n        <div style={{ maxWidth:'550px', margin:'0px auto'}}>\r\n\t        <div style={{ display: 'flex', justifyContent:'space-around', margin:\"25px 0px\", borderBottom:\"1px solid gray\"}}>\r\n\t        \t<div>\r\n\t        \t\t<img style={{width:\"160px\", height:\"160px\", borderRadius:\"80px\"}}\r\n\t        \t\tsrc={userInfo.photo?userInfo.photo:'/default-profile-picture.jpg'} alt='No Photo'/>\r\n\t        \t</div>\r\n\r\n\t        \t<div>\r\n\t        \t\t<h4>{state?state.name:'loading'}</h4>\r\n\t        \t\t<h5>{state?state.email:'loading'}</h5>\r\n\t        \t\t<div>\r\n\t        \t\t\t<h8> {myPosts.length ? myPosts.length : 0} posts </h8>\r\n\t        \t\t\t<h8> {userInfo && userInfo.following ? userInfo.following.length : 0} following </h8>\r\n\t        \t\t\t<h8> {userInfo && userInfo.followers ? userInfo.followers.length : 0} followers </h8>\r\n\t        \t\t</div>\r\n\t        \t</div>\r\n\t    \t</div>\r\n\r\n\t    \t<div className='gallery'>\r\n\t    \t{\r\n\t\t\t\tmyPosts.map(item=>{\r\n\t\t\t\t\treturn (<img key={item._id} className='item' src={item.photo} alt={item.title}/>)\r\n\t\t\t\t})   \t\t\r\n\t    \t}\t   \r\n\t    \t</div>\r\n    \t</div>\r\n    );\r\n}\r\n\r\nexport default Profile;","C:\\Users\\raj\\Desktop\\insta\\client\\src\\Components\\CreatePost.js",["72","73"],"import React , {useState, useEffect} from 'react';\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport M from 'materialize-css';\r\n\r\nconst CreatePost = () => {\r\n\tconst history = useHistory();\r\n\tconst [title, setTitle] = useState('');\r\n\tconst [body, setBody] = useState('');\r\n\tconst [image, setImage] = useState('');\r\n\tconst [url, setUrl] = useState('');\r\n\r\n\r\n\t// will be triggered as soon as the image url received from cloudinary is set in the app\r\n\t// It is also triggered on component mount, so prevent make a check\r\n\tuseEffect(()=> {\r\n\t\t// make request only when the url is available\r\n\t\tconsole.log('url existence:', url);\r\n\t\tif(url){\r\n\t\t\tfetch('/create', {\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t\t'Authorization': 'Bearer '+localStorage.getItem('jwtToken')\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbody: JSON.stringify({\r\n\t\t\t\t\t\ttitle,\r\n\t\t\t\t\t\tbody,\r\n\t\t\t\t\t\timageUrl:url\r\n\t\t\t\t\t})\r\n\t\t\t\t}).then(res=>res.json())\r\n\t\t\t\t.then(data=>{\r\n\t\t\t\t\tif(!data.error){\r\n\t\t\t\t\t\tconsole.log(data);\r\n\t\t\t\t\t\tM.toast({html: 'create post successful', classes:'#00e676 green accent-3'});\r\n\t\t\t\t\t\thistory.push('/');\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err=>{\r\n\t\t\t\t\tconsole.log('err: ', err);\r\n\t\t\t\t\tM.toast({html: 'create post failed', classes:'#c62828 red darken-3'});\r\n\t\t\t\t})\t\t\r\n\t\t}\r\n\t}, [url]);\r\n\r\n\r\n\tconst getImgUrlFrmCloudServerAndPost = ()=>{\r\n\t\tconst data = new FormData();\r\n\t\tdata.append('file', image);\r\n\t\tdata.append('upload_preset', 'insta-clone');\r\n\t\tdata.append('cloud_name', 'rjkrsngh');\r\n\r\n\t\tfetch('https://api.cloudinary.com/v1_1/rjkrsngh/image/upload',{\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: data\r\n\t\t}).then(res=>res.json())\r\n\t\t.then(data=>{\r\n\t\t\tconsole.log('got image url from cloudinary server', data.url);\r\n\r\n\t\t\t// setUrl is asynchronous and takes a while.\r\n\t\t\t// To make it synchronous, we use the useEffect hook\r\n\t\t\tsetUrl(data.url);\r\n\t\t})\r\n\t\t.catch(err=>{\r\n\t\t\tconsole.log('err getting url from cloudinary server');\r\n\t\t\tconsole.log('err details: ', err);\r\n\t\t});\t\r\n\t}\r\n\r\n    return (\r\n        <div className='create-post card input-field' style={{margin:'30px auto', maxWidth:'500px', padding:'20px', textAlign:'center'}}>\r\n\t\t\t<input type='text' placeholder='title' value={title} onChange={(event)=>setTitle(event.target.value)}/>\r\n\t\t\t<input type='text' placeholder='body' value={body} onChange={(event)=>setBody(event.target.value)}/>\r\n\t\t\t<div className=\"file-field input-field\">\r\n\t\t      <div className=\"btn #64b5f6 blue lighten-2\">\r\n\t\t        <span>Choose</span>\r\n\t\t        <input type=\"file\" onChange={(event)=>setImage(event.target.files[0])}/>\r\n\t\t      </div>\r\n\t\t      <div className=\"file-path-wrapper\">\r\n\t\t        <input className=\"file-path validate\" type=\"text\" />\r\n\t\t      </div>\r\n\t\t    </div>\t\r\n\t\t    <button className=\"btn waves-effect waves-light #64b5f6 blue lighten-2\" type=\"submit\" \r\n\t\t    name=\"action\" onClick={()=>getImgUrlFrmCloudServerAndPost()}>Post</button>\t\r\n\t\t</div>\r\n    );\r\n}\r\n\r\nexport default CreatePost;","C:\\Users\\raj\\Desktop\\insta\\client\\src\\Reducers\\userReducer.js",["74","75"],"export const initialState = null;\r\n\r\nexport const reducer = (state, action)=>{\r\n\tif(action.type == 'USER'){\r\n\t\treturn action.payload;\r\n\t}else if(action.type == 'CLEAR'){\r\n\t\treturn null;\r\n\t}\r\n\telse{\r\n\t\treturn state;\r\n\t}\r\n}","C:\\Users\\raj\\Desktop\\insta\\client\\src\\Components\\UserProfile.js",["76","77","78","79","80"],"import React, {useState, useEffect, useContext} from 'react';\r\nimport {UserContext} from '../App';\r\nimport {Link, useParams} from 'react-router-dom';\r\n\r\nconst UserProfile = () => {\r\n\t// const [myPosts, setMyPosts] = useState([]);\r\n\tconst [userInfo, setUserInfo] = useState({});\r\n\tconst [userPosts, setUserPosts] = useState([]);\r\n\tconst {state, dispatch} = useContext(UserContext);\r\n\tconst {userId} = useParams();\r\n\r\n\tuseEffect(()=>{\r\n\t\tfetch('/user/'+userId, {\r\n\t\t\tmethod : 'GET',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t'Authorization': 'Bearer ' + localStorage.getItem('jwtToken')\r\n\t\t\t}\r\n\t\t}).then(res=>res.json())\r\n\t\t.then(res=>{\r\n\t\t\tsetUserInfo(res.user);\r\n\t\t\tsetUserPosts(res.posts);\r\n\t\t}).catch(err=>{\r\n\t\t\tconsole.log('error fetching myposts from db', err);\r\n\t\t})\r\n\t}, []);\r\n\r\n\t// const makeFollowUserReq = (userId) => {\r\n\t// \tconsole.log(state._id, userId);\r\n\t// \tfetch('/user/follow/'+userId, {\r\n\t// \t\tmethod: 'PUT',\r\n\t// \t\theaders: {\r\n\t// \t\t\t'Content-Type': 'application/json',\r\n\t// \t\t\t'Authorization': 'Bearer '+ localStorage.getItem('jwtToken')\r\n\t// \t\t}\r\n\t// \t}).then(res=>res.json())\r\n\t// \t.then(res=>{\r\n\t// \t\tconsole.log(res.result)\r\n\t// \t\tsetUserInfo(res.result);\r\n\t// \t})\r\n\t// \t.catch(err=>{\r\n\t// \t\tconsole.log('error is ', err);\r\n\t// \t})\r\n\t// }\r\n\r\n\t// const makeUnfollowUserReq = (userId) => {\r\n\t// \tconsole.log(state._id, userId);\r\n\t// \tfetch('/user/unfollow/'+userId, {\r\n\t// \t\tmethod: 'PUT',\r\n\t// \t\theaders: {\r\n\t// \t\t\t'Content-Type': 'application/json',\r\n\t// \t\t\t'Authorization': 'Bearer '+ localStorage.getItem('jwtToken')\r\n\t// \t\t}\r\n\t// \t}).then(res=>res.json())\r\n\t// \t.then(res=>{\r\n\t// \t\tsetUserInfo(res.result);\r\n\t// \t})\r\n\t// \t.catch(err=>{\r\n\t// \t\tconsole.log('error is ', err);\r\n\t// \t})\r\n\t// }\t\r\n\r\n\tconst makeFollowUserReq = (userId) => {\r\n\t\tconsole.log(state._id, userId);\r\n\t\tfetch('/user/follow/'+userId, {\r\n\t\t\tmethod: 'PUT',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t'Authorization': 'Bearer '+ localStorage.getItem('jwtToken')\r\n\t\t\t}\r\n\t\t}).then(res=>res.json())\r\n\t\t.then(res=>{\r\n\t\t\tconsole.log(res.result.followers);\r\n\t\t\tsetUserInfo(res.result.followers);\r\n\t\t})\r\n\t\t.catch(err=>{\r\n\t\t\tconsole.log('error is ', err);\r\n\t\t})\r\n\t}\r\n\r\n\tconst makeUnfollowUserReq = (userId) => {\r\n\t\tconsole.log(state._id, userId);\r\n\t\tfetch('/user/unfollow/'+userId, {\r\n\t\t\tmethod: 'PUT',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t'Authorization': 'Bearer '+ localStorage.getItem('jwtToken')\r\n\t\t\t}\r\n\t\t}).then(res=>res.json())\r\n\t\t.then(res=>{\r\n\t\t\tconsole.log(res.result.followers);\r\n\t\t\tsetUserInfo(res.result.followers);\r\n\t\t})\r\n\t\t.catch(err=>{\r\n\t\t\tconsole.log('error is ', err);\r\n\t\t})\r\n\t}\r\n\r\n    return (\r\n        <div style={{ maxWidth:'550px', margin:'0px auto'}}>\r\n\t        <div style={{ display: 'flex', justifyContent:'space-around', margin:\"25px 0px\", borderBottom:\"1px solid gray\"}}>\r\n\t        \t<div>\r\n\t        \t\t<img style={{width:\"160px\", height:\"160px\", borderRadius:\"80px\"}}\r\n\t        \t\tsrc={userInfo.photo == undefined ? '/default-profile-picture.jpg' : userInfo.photo} alt='No photo'/>\r\n\t        \t</div>\r\n\r\n\t        \t<div>\r\n\t        \t\t<h4>{userInfo.name}</h4>\r\n\t        \t\t<h5>{userInfo.email}</h5>\r\n\t        \t\t<div>\r\n\t        \t\t\t<h8> {userPosts.length ? userPosts.length : 0} posts </h8>\r\n\t        \t\t\t<h8> {userInfo.following ? userInfo.following.length : 0} following </h8>\r\n\t        \t\t\t<h8> {userInfo.followers ? userInfo.followers.length : 0} followers </h8>\r\n\t        \t\t</div>\r\n\t        \t\t\t\r\n\t        \t\t{userInfo.followers && userInfo.followers.includes(state._id)\r\n\t        \t\t\t? <h7 onClick={()=>makeUnfollowUserReq(userInfo._id)}> unfollow </h7> \r\n\t        \t\t\t: <h7 onClick={()=>makeFollowUserReq(userInfo._id)}> follow </h7> \r\n\t        \t\t}\r\n\r\n\t        \t</div>\r\n\t    \t</div>\r\n\r\n\t    \t<div className='gallery'>\r\n\t    \t{\r\n\t\t\t\tuserPosts.map(item=>{\r\n\t\t\t\t\treturn (<img key={item._id} className='item' src={item.photo} alt={item.title}/>)\r\n\t\t\t\t})   \t\t\r\n\t    \t}\t   \r\n\t    \t</div>\r\n    \t</div>\r\n    );\r\n}\r\n\r\nexport default UserProfile;",{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":23,"column":10,"nodeType":"87","messageId":"88","endLine":23,"endColumn":15},{"ruleId":"89","severity":1,"message":"90","line":35,"column":6,"nodeType":"91","endLine":35,"endColumn":8,"suggestions":"92"},{"ruleId":"85","severity":1,"message":"86","line":10,"column":12,"nodeType":"87","messageId":"88","endLine":10,"endColumn":17},{"ruleId":"93","severity":1,"message":"94","line":17,"column":22,"nodeType":"95","messageId":"96","endLine":17,"endColumn":23,"suggestions":"97"},{"ruleId":"93","severity":1,"message":"94","line":17,"column":47,"nodeType":"95","messageId":"96","endLine":17,"endColumn":48,"suggestions":"98"},{"ruleId":"85","severity":1,"message":"99","line":8,"column":19,"nodeType":"87","messageId":"88","endLine":8,"endColumn":27},{"ruleId":"100","severity":1,"message":"101","line":42,"column":29,"nodeType":"102","messageId":"103","endLine":42,"endColumn":31},{"ruleId":"100","severity":1,"message":"101","line":69,"column":29,"nodeType":"102","messageId":"103","endLine":69,"endColumn":31},{"ruleId":"100","severity":1,"message":"101","line":97,"column":29,"nodeType":"102","messageId":"103","endLine":97,"endColumn":31},{"ruleId":"85","severity":1,"message":"104","line":129,"column":11,"nodeType":"87","messageId":"88","endLine":129,"endColumn":31},{"ruleId":"100","severity":1,"message":"105","line":151,"column":59,"nodeType":"102","messageId":"103","endLine":151,"endColumn":61},{"ruleId":"100","severity":1,"message":"101","line":153,"column":48,"nodeType":"102","messageId":"103","endLine":153,"endColumn":50},{"ruleId":"106","severity":1,"message":"107","line":159,"column":29,"nodeType":"108","endLine":159,"endColumn":52},{"ruleId":"85","severity":1,"message":"99","line":7,"column":16,"nodeType":"87","messageId":"88","endLine":7,"endColumn":24},{"ruleId":"109","severity":1,"message":"110","line":43,"column":12,"nodeType":"108","endLine":44,"endColumn":95},{"ruleId":"85","severity":1,"message":"111","line":2,"column":9,"nodeType":"87","messageId":"88","endLine":2,"endColumn":13},{"ruleId":"89","severity":1,"message":"112","line":43,"column":5,"nodeType":"91","endLine":43,"endColumn":10,"suggestions":"113"},{"ruleId":"100","severity":1,"message":"101","line":4,"column":17,"nodeType":"102","messageId":"103","endLine":4,"endColumn":19},{"ruleId":"100","severity":1,"message":"101","line":6,"column":23,"nodeType":"102","messageId":"103","endLine":6,"endColumn":25},{"ruleId":"85","severity":1,"message":"111","line":3,"column":9,"nodeType":"87","messageId":"88","endLine":3,"endColumn":13},{"ruleId":"85","severity":1,"message":"99","line":9,"column":16,"nodeType":"87","messageId":"88","endLine":9,"endColumn":24},{"ruleId":"89","severity":1,"message":"114","line":26,"column":5,"nodeType":"91","endLine":26,"endColumn":7,"suggestions":"115"},{"ruleId":"109","severity":1,"message":"110","line":103,"column":12,"nodeType":"108","endLine":104,"endColumn":112},{"ruleId":"100","severity":1,"message":"101","line":104,"column":32,"nodeType":"102","messageId":"103","endLine":104,"endColumn":34},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["118"],"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["119","120"],["121","122"],"'dispatch' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'makeDeleteCommentReq' is assigned a value but never used.","Expected '!==' and instead saw '!='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'body', 'history', and 'title'. Either include them or remove the dependency array.",["123"],"React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["124"],"no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"messageId":"127","fix":"128","desc":"129"},{"messageId":"130","fix":"131","desc":"132"},{"messageId":"127","fix":"133","desc":"129"},{"messageId":"130","fix":"134","desc":"132"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [dispatch, history]",{"range":"139","text":"140"},"removeEscape",{"range":"141","text":"142"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"143","text":"144"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"145","text":"142"},{"range":"146","text":"144"},"Update the dependencies array to be: [body, history, title, url]",{"range":"147","text":"148"},"Update the dependencies array to be: [userId]",{"range":"149","text":"150"},[1111,1113],"[dispatch, history]",[546,547],"",[546,546],"\\",[571,572],[571,571],[1285,1290],"[body, history, title, url]",[796,798],"[userId]"]